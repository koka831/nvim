return {
  {
    "hrsh7th/nvim-cmp",
    event = "InsertEnter",
    config = function()
      local cmp = require("cmp")
      local snip = require("luasnip")
      local types = require("cmp.types")
      -- load snippets generated by `cargo-snippet`
      snip.filetype_extend("rust", { "rust.generated" })
      require("luasnip.loaders.from_snipmate").lazy_load()

      local cmp_pair = require("nvim-autopairs.completion.cmp")
      cmp.event:on("confirm_done", cmp_pair.on_confirm_done({ map_char = { tex = "" } }))

      cmp.setup({
        mapping = {
          ["<C-k>"] = cmp.mapping.scroll_docs(-2),
          ["<C-j>"] = cmp.mapping.scroll_docs(2),
          ["<C-n>"] = cmp.mapping.select_next_item({ behavior = types.cmp.SelectBehavior.Insert }),
          ["<C-p>"] = cmp.mapping.select_prev_item({ behavior = types.cmp.SelectBehavior.Insert }),
          ["<C-y>"] = cmp.mapping.confirm({ select = false }),
          ["<C-e>"] = cmp.mapping(function(fallback)
            if snip.expand_or_jumpable() then
              snip.expand_or_jump()
            else
              fallback()
            end
          end, { "i", "s" }),
        },
        snippet = {
          expand = function(args)
            snip.lsp_expand(args.body)
          end,
        },
        sources = cmp.config.sources({
          { name = "buffer" },
          { name = "nvim_lsp" },
          { name = "nvim_lsp_signature_help" },
          { name = "path" },
          { name = "luasnip" },
        }),
        formatting = {
          format = require("lspkind").cmp_format({
            mode = "symbol",
            maxwidth = 50,
          }),
        },
      })
    end,
  },
  {
    "hrsh7th/cmp-nvim-lsp",
    event = "InsertEnter",
  },
  {
    "hrsh7th/cmp-path",
    event = "InsertEnter",
  },
  {
    "hrsh7th/cmp-buffer",
    event = "InsertEnter",
  },
  {
    "hrsh7th/cmp-nvim-lsp-signature-help",
    event = "InsertEnter",
  },
  {
    "windwp/nvim-autopairs",
    event = "InsertEnter",
    config = function()
      require("nvim-autopairs").setup({ check_ts = true })
    end,
  },
  {
    "L3MON4D3/LuaSnip",
    event = "InsertEnter",
  },
  {
    "saadparwaiz1/cmp_luasnip",
    dependencies = "hrsh7th/nvim-cmp",
    event = "InsertEnter",
  },
  "onsails/lspkind-nvim",
  {
    "github/copilot.vim",
    event = "InsertEnter",
  },
  {
    "CopilotC-Nvim/CopilotChat.nvim",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "github/copilot.vim",
    },
    build = "make tiktoken",
    branch = "main",
  },
}
