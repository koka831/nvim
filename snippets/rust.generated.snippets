snippet BinarySearch
	/// BinarySearch
	pub trait BinarySearch<T> {
		fn lower_bound(&self, x: &T) -> usize;
		fn upper_bound(&self, x: &T) -> usize;
	}
	impl<T: Ord> BinarySearch<T> for [T] {
		/// returns the minimum index s.t. array[index] >= x
		fn lower_bound(&self, x: &T) -> usize {
			let mut low = 0;
			let mut high = self.len();
			while low != high {
				let mid = (low + high) / 2;
				match self[mid].cmp(x) {
					cmp::Ordering::Less => {
						low = mid + 1;
					}
					_ => {
						high = mid;
					}
				}
			}
			low
		}
		/// returns the minimum index s.t. array[index] > x
		fn upper_bound(&self, x: &T) -> usize {
			let mut low = 0;
			let mut high = self.len();
			while low != high {
				let mid = (low + high) / 2;
				match self[mid].cmp(x) {
					cmp::Ordering::Greater => {
						high = mid;
					}
					_ => {
						low = mid + 1;
					}
				}
			}
			low
		}
	}

snippet FenwickTree
	#[derive(Debug)]
	struct FenwickTree {
		n: usize,
		bit: Vec<usize>,
	}
	impl FenwickTree {
		fn new(n: usize) -> Self {
			FenwickTree { n, bit: vec![0; n] }
		}
		fn from(v: &[usize]) -> Self {
			let mut bit = Vec::new();
			bit.extend_from_slice(v);
			FenwickTree { n: v.len(), bit }
		}
		fn sum(&self, i: usize) -> usize {
			let mut sum = 0;
			let mut i = i;
			while i > 0 {
				i -= 1;
				sum += self.bit[i];
				i &= i + 1;
			}
			sum
		}
		fn add(&mut self, i: usize, v: usize) {
			let mut i = i;
			while i < self.n {
				self.bit[i] += v;
				i |= i + 1;
			}
		}
	}

snippet ModInt
	#[derive(Copy, Clone, Debug, Eq)]
	pub struct ModInt {
		pub v: usize,
		modulo: usize,
	}
	impl ModInt {
		fn new(v: usize, modulo: usize) -> Self {
			ModInt { v, modulo }
		}
		#[inline]
		fn pow(self, power: usize) -> Self {
			if power == 0 {
				return ModInt { v: 1, ..self };
			}
			if power % 2 == 0 {
				let h = self.pow(power / 2);
				h * h
			} else {
				self * self.pow(power - 1)
			}
		}
		#[inline]
		fn inverse(self) -> Self {
			self.pow(self.modulo - 2)
		}
	}
	impl PartialEq for ModInt {
		fn eq(&self, other: &Self) -> bool {
			self.v == other.v
		}
	}
	impl std::ops::Add for ModInt {
		type Output = Self;
		#[inline]
		fn add(self, rhs: Self) -> Self::Output {
			ModInt {
				v: (self.v + rhs.v) % self.modulo,
				..self
			}
		}
	}
	impl std::ops::AddAssign for ModInt {
		#[inline]
		fn add_assign(&mut self, rhs: Self) {
			*self = *self + rhs;
		}
	}
	impl std::ops::Sub for ModInt {
		type Output = Self;
		#[inline]
		fn sub(self, rhs: Self) -> Self::Output {
			ModInt {
				v: (self.v + self.modulo - rhs.v) % self.modulo,
				..self
			}
		}
	}
	impl std::ops::SubAssign for ModInt {
		#[inline]
		fn sub_assign(&mut self, rhs: Self) {
			*self = *self - rhs;
		}
	}
	impl std::ops::Mul for ModInt {
		type Output = Self;
		#[inline]
		fn mul(self, rhs: Self) -> Self::Output {
			ModInt {
				v: (self.v * rhs.v) % self.modulo,
				..self
			}
		}
	}
	impl std::ops::MulAssign for ModInt {
		#[inline]
		fn mul_assign(&mut self, rhs: Self) {
			*self = *self * rhs;
		}
	}
	impl std::ops::Div for ModInt {
		type Output = Self;
		#[inline]
		fn div(self, rhs: Self) -> Self::Output {
			ModInt {
				v: (self.v * rhs.inverse().v) % self.modulo,
				..self
			}
		}
	}
	impl std::ops::DivAssign for ModInt {
		fn div_assign(&mut self, rhs: Self) {
			*self = *self / rhs;
		}
	}
	macro_rules! modint_impl {
		($ t : tt ) => {
			impl PartialEq<$t> for ModInt {
				fn eq(&self, other: &$t) -> bool {
					self.v == *other
				}
			}
			impl std::ops::Add<$t> for ModInt {
				type Output = Self;
				#[inline]
				fn add(self, rhs: $t) -> Self::Output {
					ModInt {
						v: (self.v + rhs) % self.modulo,
						..self
					}
				}
			}
			impl std::ops::AddAssign<$t> for ModInt {
				#[inline]
				fn add_assign(&mut self, rhs: $t) {
					*self = *self + rhs;
				}
			}
			impl std::ops::Sub<$t> for ModInt {
				type Output = Self;
				#[inline]
				fn sub(self, rhs: $t) -> Self::Output {
					ModInt {
						v: (self.v + self.modulo - rhs) % self.modulo,
						..self
					}
				}
			}
			impl std::ops::SubAssign<$t> for ModInt {
				#[inline]
				fn sub_assign(&mut self, rhs: $t) {
					*self = *self - rhs;
				}
			}
			impl std::ops::Mul<$t> for ModInt {
				type Output = Self;
				#[inline]
				fn mul(self, rhs: $t) -> Self::Output {
					ModInt {
						v: (self.v * rhs) % self.modulo,
						..self
					}
				}
			}
			impl std::ops::MulAssign<$t> for ModInt {
				#[inline]
				fn mul_assign(&mut self, rhs: $t) {
					*self = *self * rhs;
				}
			}
			impl std::ops::Div<$t> for ModInt {
				type Output = Self;
				#[inline]
				fn div(self, rhs: $t) -> Self::Output {
					let rhs = ModInt::new(rhs, self.modulo);
					ModInt {
						v: (self.v * rhs.inverse().v) % self.modulo,
						..self
					}
				}
			}
			impl std::ops::DivAssign<$t> for ModInt {
				fn div_assign(&mut self, rhs: $t) {
					*self = *self / rhs;
				}
			}
		};
	}
	modint_impl!(usize);

snippet Modulo
	pub struct Modulo {
		fact: Vec<usize>,
		inv_fact: Vec<usize>,
		modulo: usize,
	}
	impl Modulo {
		pub fn new(n: usize, modulo: usize) -> Self {
			let (mut fact, mut inv, mut inv_fact) = (vec![0; n + 1], vec![0; n + 1], vec![0; n + 1]);
			inv[1] = 1;
			fact[0] = 1;
			inv_fact[0] = 1;
			for i in 2..n + 1 {
				inv[i] = inv[modulo % i] * (modulo - modulo / i) % modulo;
			}
			for i in 0..n {
				fact[i + 1] = fact[i] * (i + 1) % modulo;
				inv_fact[i + 1] = inv_fact[i] * inv[i + 1] % modulo;
			}
			Modulo {
				fact,
				inv_fact,
				modulo,
			}
		}
		pub fn combination(&self, n: usize, r: usize) -> usize {
			if n < r {
				return 0;
			}
			self.fact[n] * self.inv_fact[r] % self.modulo * self.inv_fact[n - r] % self.modulo
		}
	}

snippet SegmentTree
	/// SegmentTree
	pub struct SegmentTree<T, F> {
		n: usize,
		value: Vec<T>,
		id: T,
		f: F,
	}
	impl<T, F> SegmentTree<T, F>
	where
		T: Clone,
		F: Fn(&T, &T) -> T,
	{
		pub fn new(n: usize, id: T, f: F) -> Self {
			let mut capacity = 1;
			while capacity <= n {
				capacity *= 2;
			}
			SegmentTree {
				n: capacity,
				value: vec![id.clone(); 2 * capacity],
				id,
				f,
			}
		}
		pub fn from(v: &[T], id: T, f: F) -> Self {
			let n = v.len();
			let mut vs = vec![id.clone(); n];
			vs.extend_from_slice(v);
			for i in (1..n).rev() {
				vs[i] = f(&vs[i * 2], &vs[i * 2 + 1]);
			}
			SegmentTree {
				n,
				value: vs,
				id,
				f,
			}
		}
		#[inline]
		pub fn get(&self, i: usize) -> T {
			self.value[i + self.n].clone()
		}
		pub fn update(&mut self, i: usize, x: T) {
			let mut i = i;
			i += self.n;
			self.value[i] = x;
			while {
				i /= 2;
				i > 0
			} {
				self.value[i] = (self.f)(&self.value[i * 2], &self.value[i * 2 + 1]);
			}
		}
		pub fn apply(&mut self, l: usize, r: usize) -> T {
			assert!(r < self.n);
			let (mut x, mut y) = (self.id.clone(), self.id.clone());
			let (mut l, mut r) = (l + self.n, r + self.n);
			while l < r {
				if l % 2 != 0 {
					x = (self.f)(&x, &self.value[l]);
					l += 1;
				}
				if r % 2 != 0 {
					r -= 1;
					y = (self.f)(&self.value[r], &y);
				}
				l /= 2;
				r /= 2;
			}
			(self.f)(&x, &y)
		}
	}

snippet UnionFind
	/// UnionFind
	pub struct UnionFind {
		par: Vec<usize>,
		rank: Vec<usize>,
	}
	impl UnionFind {
		pub fn new(n: usize) -> Self {
			UnionFind {
				par: (0..n).collect(),
				rank: vec![0; n],
			}
		}
		pub fn find(&mut self, x: usize) -> usize {
			if self.par[x] == x {
				return x;
			}
			let y = self.par[x];
			self.par[x] = self.find(y);
			self.par[x]
		}
		pub fn same(&mut self, x: usize, y: usize) -> bool {
			self.find(x) == self.find(y)
		}
		pub fn unite(&mut self, x: usize, y: usize) {
			let x = self.find(x);
			let y = self.find(y);
			if x == y {
				return;
			}
			match self.rank[x].cmp(&self.rank[y]) {
				Ordering::Less => {
					self.par[x] = y;
				}
				Ordering::Equal => {
					self.par[y] = x;
					self.rank[x] += 1;
				}
				Ordering::Greater => {
					self.par[y] = x;
				}
			}
		}
	}

snippet divide
	fn divide(n: usize) -> Option<usize> {
		for i in 2..(n as f64).sqrt().ceil() as usize + 1 {
			if n % i == 0 {
				return Some(i);
			}
		}
		None
	}

snippet gcd
	pub fn gcd(a: usize, b: usize) -> usize {
		if b == 0 {
			a
		} else {
			gcd(b, a % b)
		}
	}

snippet io
	pub mod io {
		use std::io;
		pub fn read<T>() -> Vec<T>
		where
			T: std::str::FromStr,
			T::Err: std::fmt::Debug,
		{
			let mut buf = String::new();
			io::stdin().read_line(&mut buf).unwrap();
			buf.split_whitespace()
				.map(|s| s.trim().parse().unwrap())
				.collect()
		}
		pub fn read_one<T>() -> T
		where
			T: std::str::FromStr,
			T::Err: std::fmt::Debug,
		{
			let mut buf = String::new();
			io::stdin().read_line(&mut buf).unwrap();
			buf.trim().parse().unwrap()
		}
	}

snippet lcm
	pub fn gcd(a: usize, b: usize) -> usize {
		if b == 0 {
			a
		} else {
			gcd(b, a % b)
		}
	}
	pub fn lcm(a: usize, b: usize) -> usize {
		a / gcd(a, b) * b
	}

snippet ncr
	pub struct Modulo {
		fact: Vec<usize>,
		inv_fact: Vec<usize>,
		modulo: usize,
	}
	impl Modulo {
		pub fn new(n: usize, modulo: usize) -> Self {
			let (mut fact, mut inv, mut inv_fact) = (vec![0; n + 1], vec![0; n + 1], vec![0; n + 1]);
			inv[1] = 1;
			fact[0] = 1;
			inv_fact[0] = 1;
			for i in 2..n + 1 {
				inv[i] = inv[modulo % i] * (modulo - modulo / i) % modulo;
			}
			for i in 0..n {
				fact[i + 1] = fact[i] * (i + 1) % modulo;
				inv_fact[i + 1] = inv_fact[i] * inv[i + 1] % modulo;
			}
			Modulo {
				fact,
				inv_fact,
				modulo,
			}
		}
		pub fn combination(&self, n: usize, r: usize) -> usize {
			if n < r {
				return 0;
			}
			self.fact[n] * self.inv_fact[r] % self.modulo * self.inv_fact[n - r] % self.modulo
		}
	}

snippet prime_factor
	fn divide(n: usize) -> Option<usize> {
		for i in 2..(n as f64).sqrt().ceil() as usize + 1 {
			if n % i == 0 {
				return Some(i);
			}
		}
		None
	}
	/// returns vec of prime factors of n
	/// it also contains 1 and n itself
	pub fn prime_factor(n: usize) -> Vec<usize> {
		let mut x = n;
		let mut factors = Vec::new();
		while let Some(f) = divide(x) {
			x /= f;
			factors.push(f);
		}
		factors.push(x);
		factors
	}

# vim:ft=snippets:
